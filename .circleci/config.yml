# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.0

experimental:
  pipelines: true

jobs:
  build:
    filters:
      branches:
        only:
          - circleci-project-setup
    docker:
      # specify the version
      - image: circleci/golang:1.9

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/Mel-GitHub/redis-golang-app
    environment:
      DOCKER_USER: melcheng  
      STABLE_RELEASE: v0.1
      RELEASE_BRANCH: release-candidate
      MINOR_VERSION: << pipeline.number >>
    steps:
      - checkout
      - run: # print the name of the branch we're on
          name: "What is the CIRCLE_BUILD_NUM?"
          command: echo ${CIRCLE_BUILD_NUM}
      - run: # print the name of the branch we're on
          name: "What is the pipeline number?"
          command: echo "<< pipeline.number >>"
      - run: # print the name of the branch we're on
          name: "Export Build number"
          command: echo 'export BUILD_NUMBER="${CIRCLE_BUILD_NUM}"' >> $BASH_ENV
      - run: 
          name: Get all dependencies
          command: |
            go get -v -t -d ./...
            go get -u github.com/gomodule/redigo/redis
            go get -u github.com/rs/zerolog/log
            go get -u github.com/rs/zerolog
      - setup_remote_docker
            # docker_layer_caching: true
      - run: mkdir -p workspace/docker_storage

      - run:
          name: Build Docker Images
          command: |
          
           ## docker build -t ${DOCKER_USER}/${CIRCLE_PROJECT_REPONAME}:${STABLE_RELEASE}.${CIRCLE_BUILD_NUM} .
            docker build -t ${DOCKER_USER}/${CIRCLE_PROJECT_REPONAME}:${STABLE_RELEASE}.${CIRCLE_SHA1} .
            docker images  
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
           ## docker push ${DOCKER_USER}/${CIRCLE_PROJECT_REPONAME}:${STABLE_RELEASE}.${CIRCLE_BUILD_NUM}
            docker push ${DOCKER_USER}/${CIRCLE_PROJECT_REPONAME}:${STABLE_RELEASE}.${CIRCLE_SHA1}

            docker save -o workspace/docker_storage/${STABLE_RELEASE}.${CIRCLE_SHA1}.tar ${DOCKER_USER}/${CIRCLE_PROJECT_REPONAME}:${STABLE_RELEASE}.${CIRCLE_SHA1}
      - persist_to_workspace:
          root: workspace
          paths:
            - docker_storage     

  test:
    docker:
      # specify the version
      - image: alpine:3.4
    steps:
      - run:
          name: Performing Testing
          command: |
            echo "Invoke automated testing here"
  integration_test:
    docker:
      # specify the version
      - image: alpine:3.4
    steps:
      - run:
          name: Performing Testing
          command: |
            echo "Invoke automated testing here"
  container-scan:
    docker:
      # specify the version
      - image: circleci/golang:1.9
    steps:
      - attach_workspace:
          at: /go/src/github.com/Mel-GitHub/redis-golang-app/workspace
      - setup_remote_docker
      - run:
          name: Container Scan Testing
          command: |
            docker load -i /go/src/github.com/Mel-GitHub/redis-golang-app/workspace/docker_storage/${STABLE_RELEASE}.${CIRCLE_SHA1}.tar
            docker images 
  
      #     name: Install trivy
      #     command: |
      #       apk add --update-cache --upgrade curl rpm
      #       VERSION=$(
      #           curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | \
      #           grep '"tag_name":' | \
      #           sed -E 's/.*"v([^"]+)".*/\1/'
      #       )

      #       wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
      #       tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
      #       mv trivy /usr/local/bin
      # - run:
      #     name: Scan the local image with trivy
      #     command: trivy --exit-code 0 --no-progress trivy-ci-test:${CIRCLE_SHA1}
  

  git_update:
    filters:
      branches:
        only:
          - circleci-project-setup
    docker:
      # specify the version
      - image: circleci/golang:1.9

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/Mel-GitHub/redis-golang-app
    environment:
      DOCKER_USER: melcheng  
      STABLE_RELEASE: v0.1
      RELEASE_BRANCH: release-candidate
    steps:
      - checkout     
      - run: # print the name of the branch we're on
          name: "What is BUILD_NUMBER?"
          command: echo "${BUILD_NUMBER}"
      - run:
          name: Update Github deployment 
          command: |
            ## sed -i "s/v[0-9]*\.[0-9]*\.[0-9]*/${STABLE_RELEASE}.${CIRCLE_PREVIOUS_BUILD_NUM}/g" ${CIRCLE_WORKING_DIRECTORY}/deploy/redis-golang-app-deploy.yml
            sed -i "s/v[0-9]*\.[0-9]*\.[0-9]*/${STABLE_RELEASE}.${CIRCLE_SHA1}/g" ${CIRCLE_WORKING_DIRECTORY}/deploy/redis-golang-app-deploy.yml
            cat ${CIRCLE_WORKING_DIRECTORY}/deploy/redis-golang-app-deploy.yml
            git version

            git config --global user.email "bot@circleci.com"
            git config --global user.name "Deployment Bot"
            git add .
            ## git commit -m "Update via CircleCI BOT ${STABLE_RELEASE}.${CIRCLE_PREVIOUS_BUILD_NUM}"
            git commit -m "Update via CircleCI BOT ${STABLE_RELEASE}.${CIRCLE_SHA1}"

            # Push quietly to prevent showing the token in log
            echo " git branch --set-upstream-to origin/${RELEASE_BRANCH} ${CIRCLE_BRANCH}"
            git branch --set-upstream-to origin/${RELEASE_BRANCH} ${CIRCLE_BRANCH}
            git push -f origin HEAD:${RELEASE_BRANCH}

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          context: DOCKERHUB
          filters:
            branches:
              only: circleci-project-setup        
      - test:
          context: DOCKERHUB 
          requires:
            - build
          filters:
            branches:
              only: circleci-project-setup
      - integration_test:
          context: DOCKERHUB 
          requires:
            - build
          filters:
            branches:
              only: circleci-project-setup
      - container-scan:
          context: DOCKERHUB 
          requires:
            - integration_test
            - test
          filters:
            branches:
              only: circleci-project-setup
      - git_update:
          context: DOCKERHUB
          requires:
            - container-scan
          filters:
            branches:
              only: circleci-project-setup